{"ast":null,"code":"var _jsxFileName = \"/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Pages/Create.js\";\nimport React, { useState } from \"react\";\nimport Title from \"../Components/Title\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport Question from \"../Components/Question\";\nimport AddButton from \"../Components/AddButton\";\nimport { HOST, QUESTION_TYPES } from \"../Config\";\nimport axios from \"axios\";\nimport MessageToast from \"../Components/MessageToast\";\n/**\n * Survey creation page.\n *\n * @returns JSX.Element\n */\n\nexport default function Create() {\n  const emptyQuestionTemplate = {\n    question: \"\",\n    questionType: QUESTION_TYPES.MULTIPLE_CHOICE,\n    answerOptions: [\"\", \"\"]\n  };\n  const [validated, setValidated] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    error: true,\n    body: \"\"\n  });\n  const [state, setState] = useState({\n    questions: [{ ...emptyQuestionTemplate\n    }]\n  });\n  const [errorState, setErrorState] = useState([]);\n\n  const isStateValide = currentState => {\n    let isValid = true;\n    setErrorState([]);\n\n    if (currentState.questions.length < 1) {\n      setErrorState(prevState => {\n        const newState = [...prevState];\n        newState.push({\n          errorMsg: \"Erfasse mindestens 1 Frage.\"\n        });\n        return newState;\n      });\n      isValid = false;\n    }\n\n    currentState.questions.forEach((question, questionIndex) => {\n      if (question.question === \"\") {\n        isValid = false;\n      }\n\n      if (question.questionType === QUESTION_TYPES.MULTISELECT && question.answerOptions.length < 1) {\n        setErrorState(prevState => {\n          const newState = [...prevState];\n          newState.push({\n            questionIndex: questionIndex,\n            errorMsg: \"Diese Frage benötigt mindestens 1 Antwort.\"\n          });\n          return newState;\n        });\n        isValid = false;\n      }\n\n      if (question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE && question.answerOptions.length < 2) {\n        setErrorState(prevState => {\n          const newState = [...prevState];\n          newState.push({\n            questionIndex: questionIndex,\n            errorMsg: \"Diese Frage benötigt mindestens 2 Antworten.\"\n          });\n          return newState;\n        });\n        isValid = false;\n      }\n\n      question.answerOptions.forEach(answer => {\n        if (answer === \"\") {\n          isValid = false;\n        }\n      });\n    });\n    return isValid;\n  };\n\n  const submitForm = event => {\n    event.preventDefault();\n\n    if (isStateValide(state)) {\n      axios.post(`${HOST}/api/survey/`, state).then(response => {\n        window.location.replace(`/evaluate/${response.data.surveySecretId}`);\n      }).catch(error => {\n        setShowToast(prevState => {\n          const newState = { ...prevState,\n            show: true,\n            body: error.message\n          };\n          return newState;\n        });\n        console.error({\n          error\n        });\n      });\n    }\n\n    setValidated(true);\n  };\n\n  const addQuestion = () => {\n    setState(prevState => {\n      const newState = [...prevState.questions];\n      newState.push({ ...emptyQuestionTemplate\n      });\n      return {\n        questions: newState\n      };\n    });\n  };\n\n  const removeQuestion = index => {\n    setState(prevState => {\n      const newState = [...prevState.questions];\n      newState.splice(index, 1);\n      return {\n        questions: newState\n      };\n    });\n  };\n\n  const addAnswerOption = index => {\n    setState(prevState => {\n      const newState = prevState.questions.map((prevQuestion, i) => {\n        if (i === index) {\n          const newQuestion = { ...prevQuestion,\n            answerOptions: [...prevQuestion.answerOptions, \"\"]\n          };\n          return newQuestion;\n        }\n\n        return prevQuestion;\n      });\n      return {\n        questions: newState\n      };\n    });\n  };\n\n  const removeAnswerOption = questionIndex => {\n    return answerOptionIndex => {\n      setState(prevState => {\n        const newState = prevState.questions.map((prevQuestion, i) => {\n          if (i === questionIndex) {\n            const newAnswerOptions = [...prevQuestion.answerOptions];\n            newAnswerOptions.splice(answerOptionIndex, 1);\n            const newQuestion = { ...prevQuestion,\n              answerOptions: newAnswerOptions\n            };\n            return newQuestion;\n          }\n\n          return prevQuestion;\n        });\n        return {\n          questions: newState\n        };\n      });\n    };\n  };\n\n  const updateQuestion = index => {\n    return newValue => {\n      setState(prevState => {\n        const newState = [...prevState.questions];\n        newState[index].question = newValue.target.value;\n        return {\n          questions: newState\n        };\n      });\n    };\n  };\n\n  const updateAnswerOption = questionIndex => {\n    return answerOptionIndex => {\n      return newValue => {\n        setState(prevState => {\n          const newState = [...prevState.questions];\n          newState[questionIndex].answerOptions[answerOptionIndex] = newValue.target.value;\n          return {\n            questions: newState\n          };\n        });\n      };\n    };\n  };\n\n  const updateQuestionType = questionIndex => {\n    return newValue => {\n      setState(prevState => {\n        const newState = [...prevState.questions];\n        newState[questionIndex].questionType = newValue.target.value;\n        return {\n          questions: newState\n        };\n      });\n    };\n  };\n\n  const generalErrors = () => {\n    return errorState.filter(error => !error.hasOwnProperty(\"questionIndex\"));\n  };\n\n  const closeToast = () => {\n    setShowToast(prevState => {\n      const newState = { ...prevState,\n        show: false\n      };\n      return newState;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, \"Erstelle eine Umfrage\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: submitForm,\n    noValidate: true,\n    validated: validated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vertical-stack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, state.questions.map((question, i) => /*#__PURE__*/React.createElement(Question, {\n    key: i,\n    questionIndex: i,\n    answerOptions: question.answerOptions,\n    questionValue: question.question,\n    updateQuestion: (() => updateQuestion(i))(),\n    removeQuestion: () => removeQuestion(i),\n    updateQuestionType: (() => updateQuestionType(i))(),\n    addAnswerOption: () => addAnswerOption(i),\n    removeAnswerOption: (() => removeAnswerOption(i))(),\n    updateAnswerOption: (() => updateAnswerOption(i))(),\n    questionType: question.questionType,\n    errorState: errorState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }))), generalErrors().length > 0 && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, generalErrors().map(error => error.errorMsg)), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"my-4 d-flex justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AddButton, {\n    action: addQuestion,\n    hint: \"Frage hinzuf\\xFCgen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    href: \"/selectPath\",\n    variant: \"link\",\n    className: \"text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, \"Abbrechen\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }, \"Umfrage absenden\")))), /*#__PURE__*/React.createElement(MessageToast, {\n    visibility: showToast.show,\n    onClose: closeToast,\n    error: showToast.error,\n    body: showToast.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Pages/Create.js"],"names":["React","useState","Title","Alert","Button","Form","Question","AddButton","HOST","QUESTION_TYPES","axios","MessageToast","Create","emptyQuestionTemplate","question","questionType","MULTIPLE_CHOICE","answerOptions","validated","setValidated","showToast","setShowToast","show","error","body","state","setState","questions","errorState","setErrorState","isStateValide","currentState","isValid","length","prevState","newState","push","errorMsg","forEach","questionIndex","MULTISELECT","answer","submitForm","event","preventDefault","post","then","response","window","location","replace","data","surveySecretId","catch","message","console","addQuestion","removeQuestion","index","splice","addAnswerOption","map","prevQuestion","i","newQuestion","removeAnswerOption","answerOptionIndex","newAnswerOptions","updateQuestion","newValue","target","value","updateAnswerOption","updateQuestionType","generalErrors","filter","hasOwnProperty","closeToast"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Title from \"../Components/Title\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport Question from \"../Components/Question\";\nimport AddButton from \"../Components/AddButton\";\nimport { HOST, QUESTION_TYPES } from \"../Config\";\nimport axios from \"axios\";\nimport MessageToast from \"../Components/MessageToast\";\n\n/**\n * Survey creation page.\n *\n * @returns JSX.Element\n */\n\nexport default function Create() {\n  const emptyQuestionTemplate = {\n    question: \"\",\n    questionType: QUESTION_TYPES.MULTIPLE_CHOICE,\n    answerOptions: [\"\", \"\"],\n  };\n  const [validated, setValidated] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    error: true,\n    body: \"\",\n  });\n  const [state, setState] = useState({\n    questions: [\n      {\n        ...emptyQuestionTemplate,\n      },\n    ],\n  });\n  const [errorState, setErrorState] = useState([]);\n\n  const isStateValide = (currentState) => {\n    let isValid = true;\n    setErrorState([]);\n\n    if (currentState.questions.length < 1) {\n      setErrorState((prevState) => {\n        const newState = [...prevState];\n        newState.push({\n          errorMsg: \"Erfasse mindestens 1 Frage.\",\n        });\n        return newState;\n      });\n      isValid = false;\n    }\n\n    currentState.questions.forEach((question, questionIndex) => {\n      if (question.question === \"\") {\n        isValid = false;\n      }\n      if (\n        question.questionType === QUESTION_TYPES.MULTISELECT &&\n        question.answerOptions.length < 1\n      ) {\n        setErrorState((prevState) => {\n          const newState = [...prevState];\n          newState.push({\n            questionIndex: questionIndex,\n            errorMsg: \"Diese Frage benötigt mindestens 1 Antwort.\",\n          });\n          return newState;\n        });\n        isValid = false;\n      }\n      if (\n        question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE &&\n        question.answerOptions.length < 2\n      ) {\n        setErrorState((prevState) => {\n          const newState = [...prevState];\n          newState.push({\n            questionIndex: questionIndex,\n            errorMsg: \"Diese Frage benötigt mindestens 2 Antworten.\",\n          });\n          return newState;\n        });\n        isValid = false;\n      }\n      question.answerOptions.forEach((answer) => {\n        if (answer === \"\") {\n          isValid = false;\n        }\n      });\n    });\n\n    return isValid;\n  };\n\n  const submitForm = (event) => {\n    event.preventDefault();\n    if (isStateValide(state)) {\n      axios\n        .post(`${HOST}/api/survey/`, state)\n        .then((response) => {\n          window.location.replace(`/evaluate/${response.data.surveySecretId}`);\n        })\n        .catch((error) => {\n          setShowToast((prevState) => {\n            const newState = {\n              ...prevState,\n              show: true,\n              body: error.message,\n            };\n            return newState;\n          });\n          console.error({ error });\n        });\n    }\n    setValidated(true);\n  };\n\n  const addQuestion = () => {\n    setState((prevState) => {\n      const newState = [...prevState.questions];\n      newState.push({ ...emptyQuestionTemplate });\n      return { questions: newState };\n    });\n  };\n\n  const removeQuestion = (index) => {\n    setState((prevState) => {\n      const newState = [...prevState.questions];\n      newState.splice(index, 1);\n      return { questions: newState };\n    });\n  };\n\n  const addAnswerOption = (index) => {\n    setState((prevState) => {\n      const newState = prevState.questions.map((prevQuestion, i) => {\n        if (i === index) {\n          const newQuestion = {\n            ...prevQuestion,\n            answerOptions: [...prevQuestion.answerOptions, \"\"],\n          };\n          return newQuestion;\n        }\n        return prevQuestion;\n      });\n      return { questions: newState };\n    });\n  };\n\n  const removeAnswerOption = (questionIndex) => {\n    return (answerOptionIndex) => {\n      setState((prevState) => {\n        const newState = prevState.questions.map((prevQuestion, i) => {\n          if (i === questionIndex) {\n            const newAnswerOptions = [...prevQuestion.answerOptions];\n            newAnswerOptions.splice(answerOptionIndex, 1);\n            const newQuestion = {\n              ...prevQuestion,\n              answerOptions: newAnswerOptions,\n            };\n            return newQuestion;\n          }\n          return prevQuestion;\n        });\n        return { questions: newState };\n      });\n    };\n  };\n\n  const updateQuestion = (index) => {\n    return (newValue) => {\n      setState((prevState) => {\n        const newState = [...prevState.questions];\n        newState[index].question = newValue.target.value;\n        return { questions: newState };\n      });\n    };\n  };\n\n  const updateAnswerOption = (questionIndex) => {\n    return (answerOptionIndex) => {\n      return (newValue) => {\n        setState((prevState) => {\n          const newState = [...prevState.questions];\n          newState[questionIndex].answerOptions[answerOptionIndex] =\n            newValue.target.value;\n          return { questions: newState };\n        });\n      };\n    };\n  };\n\n  const updateQuestionType = (questionIndex) => {\n    return (newValue) => {\n      setState((prevState) => {\n        const newState = [...prevState.questions];\n        newState[questionIndex].questionType = newValue.target.value;\n        return { questions: newState };\n      });\n    };\n  };\n\n  const generalErrors = () => {\n    return errorState.filter((error) => !error.hasOwnProperty(\"questionIndex\"));\n  };\n\n  const closeToast = () => {\n    setShowToast((prevState) => {\n      const newState = { ...prevState, show: false };\n      return newState;\n    });\n  };\n\n  return (\n    <>\n      <Title>Erstelle eine Umfrage</Title>\n      <Form onSubmit={submitForm} noValidate validated={validated}>\n        <div className=\"vertical-stack\">\n          {state.questions.map((question, i) => (\n            <Question\n              key={i}\n              questionIndex={i}\n              answerOptions={question.answerOptions}\n              questionValue={question.question}\n              updateQuestion={(() => updateQuestion(i))()}\n              removeQuestion={() => removeQuestion(i)}\n              updateQuestionType={(() => updateQuestionType(i))()}\n              addAnswerOption={() => addAnswerOption(i)}\n              removeAnswerOption={(() => removeAnswerOption(i))()}\n              updateAnswerOption={(() => updateAnswerOption(i))()}\n              questionType={question.questionType}\n              errorState={errorState}\n            />\n          ))}\n        </div>\n        {generalErrors().length > 0 && (\n          <Alert variant=\"danger\" className=\"mt-3\">\n            {generalErrors().map((error) => error.errorMsg)}\n          </Alert>\n        )}\n        <Form.Group className=\"my-4 d-flex justify-content-between\">\n          <AddButton action={addQuestion} hint=\"Frage hinzufügen\" />\n          <div>\n            <Button href=\"/selectPath\" variant=\"link\" className=\"text-white\">\n              Abbrechen\n            </Button>\n            <Button type=\"submit\">Umfrage absenden</Button>\n          </div>\n        </Form.Group>\n      </Form>\n      <MessageToast\n        visibility={showToast.show}\n        onClose={closeToast}\n        error={showToast.error}\n        body={showToast.body}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}