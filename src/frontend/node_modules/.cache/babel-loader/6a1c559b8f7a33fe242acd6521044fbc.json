{"ast":null,"code":"var _jsxFileName = \"/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Pages/Participate.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Spinner, Form, Button } from \"react-bootstrap\";\nimport Title from \"../Components/Title\";\nimport InsertCode from \"../Components/InsertCode\";\nimport { HOST, QUESTION_TYPES } from \"../Config\";\nimport QuestionParticipationBlock from \"../Components/QuestionParticipationBlock\";\nimport axios from \"axios\";\nimport MessageToast from \"../Components/MessageToast\";\n/**\n * Page for participate in a survey.\n * Props contain an {id} param injected from the client-side router.\n *\n * @returns JSX.Element\n */\n\nconst Participate = props => {\n  const urlId = props.match.params.id;\n  const [data, setData] = useState();\n  const [isSent, setIsSent] = useState(false);\n  const [isValidId, setIsValidId] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [validated, setValidated] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    error: true,\n    body: \"\"\n  });\n  useEffect(() => {\n    fetch(`${HOST}/api/survey/${urlId}/`).then(response => response.json()).then(json => json.questions.map(question => {\n      question.answerOptions = question.answerOptions.map(answerOption => {\n        return { ...answerOption,\n          choosen: false\n        };\n      });\n      return question;\n    })).then(json => {\n      setIsLoading(false);\n      setData(json);\n      setIsValidId(true);\n    }).catch(error => {\n      setIsLoading(false);\n      setShowToast(prevState => {\n        const newState = { ...prevState,\n          show: true,\n          error: true,\n          body: error.message\n        };\n        return newState;\n      });\n      console.error({\n        error\n      });\n    });\n  }, [urlId]);\n\n  const isStateValide = currentState => {\n    let isValid = true;\n    currentState.forEach(question => {\n      if (question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE) {\n        const countChoosen = question.answerOptions.filter(answerOption => answerOption.choosen);\n\n        if (countChoosen < 1) {\n          isValid = false;\n        }\n      }\n    });\n    return isValid;\n  };\n\n  const submitForm = event => {\n    event.preventDefault();\n\n    if (isStateValide(data)) {\n      const answerOptions = data.map(question => question.answerOptions.filter(answerOption => answerOption.choosen).map(answerOption => answerOption.answerOptionId)).reduce((acc, question) => acc.concat(question), []);\n      axios.post(`${HOST}/api/survey/${urlId}/participation/`, {\n        answerOptions\n      }).then(() => {\n        setIsSent(true);\n      }).catch(error => {\n        setShowToast(prevState => {\n          const newState = { ...prevState,\n            show: true,\n            error: true,\n            body: error.message\n          };\n          return newState;\n        });\n        console.error({\n          error\n        });\n      });\n    }\n\n    setValidated(true);\n  };\n\n  const updateChoosen = questionId => {\n    return answerOptionId => {\n      setData(prevState => {\n        const newState = prevState.map(question => {\n          if (question.questionId !== questionId) {\n            return question;\n          }\n\n          let newAnswerOptions = [];\n\n          if (question.questionType === QUESTION_TYPES.MULTISELECT) {\n            newAnswerOptions = question.answerOptions.map(answerOption => {\n              if (answerOption.answerOptionId === answerOptionId) {\n                return { ...answerOption,\n                  choosen: !answerOption.choosen\n                };\n              }\n\n              return answerOption;\n            });\n            return { ...question,\n              answerOptions: newAnswerOptions\n            };\n          }\n\n          newAnswerOptions = question.answerOptions.map(answerOption => {\n            return { ...answerOption,\n              choosen: answerOption.answerOptionId === answerOptionId\n            };\n          });\n          return { ...question,\n            answerOptions: newAnswerOptions\n          };\n        });\n        return newState;\n      });\n    };\n  };\n\n  const closeToast = () => {\n    setShowToast(prevState => {\n      const newState = { ...prevState,\n        show: false\n      };\n      return newState;\n    });\n  };\n\n  const showSpinner = () => {\n    return /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, \"L\\xE4dt...\"));\n  };\n\n  const showCodeInput = () => {\n    return /*#__PURE__*/React.createElement(InsertCode, {\n      url: \"participate\",\n      urlId: urlId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const showParticipationForm = () => {\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: submitForm,\n      noValidate: true,\n      validated: validated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vertical-stack\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, data.map((question, i) => /*#__PURE__*/React.createElement(QuestionParticipationBlock, {\n      question: question,\n      updateChoosen: (() => updateChoosen(question.questionId))(),\n      questionIndex: i,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Group, {\n      className: \"my-4 d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      href: \"/selectPath\",\n      variant: \"link\",\n      className: \"text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, \"Abbrechen\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, \"Teilnahme absenden\"))));\n  };\n\n  const showParticipationFinished = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        marginTop: \"25vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, \"Vielen Dank f\\xFCr deine Teilnahme!\"), /*#__PURE__*/React.createElement(Button, {\n      href: \"/\",\n      variant: \"primary\",\n      className: \"my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, \"Zur Startseite\"));\n  };\n\n  const showState = () => {\n    if (isSent) {\n      return showParticipationFinished();\n    }\n\n    if (isLoading) {\n      return showSpinner();\n    }\n\n    if (isValidId) {\n      return showParticipationForm();\n    }\n\n    return showCodeInput();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, \"Teilnahme\"), showState(), /*#__PURE__*/React.createElement(MessageToast, {\n    visibility: showToast.show,\n    onClose: closeToast,\n    error: showToast.error,\n    body: showToast.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Participate;","map":{"version":3,"sources":["/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Pages/Participate.js"],"names":["React","useState","useEffect","Spinner","Form","Button","Title","InsertCode","HOST","QUESTION_TYPES","QuestionParticipationBlock","axios","MessageToast","Participate","props","urlId","match","params","id","data","setData","isSent","setIsSent","isValidId","setIsValidId","isLoading","setIsLoading","validated","setValidated","showToast","setShowToast","show","error","body","fetch","then","response","json","questions","map","question","answerOptions","answerOption","choosen","catch","prevState","newState","message","console","isStateValide","currentState","isValid","forEach","questionType","MULTIPLE_CHOICE","countChoosen","filter","submitForm","event","preventDefault","answerOptionId","reduce","acc","concat","post","updateChoosen","questionId","newAnswerOptions","MULTISELECT","closeToast","showSpinner","showCodeInput","showParticipationForm","i","showParticipationFinished","marginTop","showState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Spinner, Form, Button } from \"react-bootstrap\";\nimport Title from \"../Components/Title\";\nimport InsertCode from \"../Components/InsertCode\";\nimport { HOST, QUESTION_TYPES } from \"../Config\";\nimport QuestionParticipationBlock from \"../Components/QuestionParticipationBlock\";\nimport axios from \"axios\";\nimport MessageToast from \"../Components/MessageToast\";\n\n/**\n * Page for participate in a survey.\n * Props contain an {id} param injected from the client-side router.\n *\n * @returns JSX.Element\n */\n\nconst Participate = (props) => {\n  const urlId = props.match.params.id;\n  const [data, setData] = useState();\n  const [isSent, setIsSent] = useState(false);\n  const [isValidId, setIsValidId] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [validated, setValidated] = useState(false);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    error: true,\n    body: \"\",\n  });\n\n  useEffect(() => {\n    fetch(`${HOST}/api/survey/${urlId}/`)\n      .then((response) => response.json())\n      .then((json) =>\n        json.questions.map((question) => {\n          question.answerOptions = question.answerOptions.map(\n            (answerOption) => {\n              return { ...answerOption, choosen: false };\n            }\n          );\n          return question;\n        })\n      )\n      .then((json) => {\n        setIsLoading(false);\n        setData(json);\n        setIsValidId(true);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n        setShowToast((prevState) => {\n          const newState = {\n            ...prevState,\n            show: true,\n            error: true,\n            body: error.message,\n          };\n          return newState;\n        });\n        console.error({ error });\n      });\n  }, [urlId]);\n\n  const isStateValide = (currentState) => {\n    let isValid = true;\n\n    currentState.forEach((question) => {\n      if (question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE) {\n        const countChoosen = question.answerOptions.filter(\n          (answerOption) => answerOption.choosen\n        );\n        if (countChoosen < 1) {\n          isValid = false;\n        }\n      }\n    });\n    return isValid;\n  };\n\n  const submitForm = (event) => {\n    event.preventDefault();\n    if (isStateValide(data)) {\n      const answerOptions = data\n        .map((question) =>\n          question.answerOptions\n            .filter((answerOption) => answerOption.choosen)\n            .map((answerOption) => answerOption.answerOptionId)\n        )\n        .reduce((acc, question) => acc.concat(question), []);\n      axios\n        .post(`${HOST}/api/survey/${urlId}/participation/`, { answerOptions })\n        .then(() => {\n          setIsSent(true);\n        })\n        .catch((error) => {\n          setShowToast((prevState) => {\n            const newState = {\n              ...prevState,\n              show: true,\n              error: true,\n              body: error.message,\n            };\n            return newState;\n          });\n          console.error({ error });\n        });\n    }\n    setValidated(true);\n  };\n\n  const updateChoosen = (questionId) => {\n    return (answerOptionId) => {\n      setData((prevState) => {\n        const newState = prevState.map((question) => {\n          if (question.questionId !== questionId) {\n            return question;\n          }\n          let newAnswerOptions = [];\n          if (question.questionType === QUESTION_TYPES.MULTISELECT) {\n            newAnswerOptions = question.answerOptions.map((answerOption) => {\n              if (answerOption.answerOptionId === answerOptionId) {\n                return { ...answerOption, choosen: !answerOption.choosen };\n              }\n              return answerOption;\n            });\n            return { ...question, answerOptions: newAnswerOptions };\n          }\n          newAnswerOptions = question.answerOptions.map((answerOption) => {\n            return {\n              ...answerOption,\n              choosen: answerOption.answerOptionId === answerOptionId,\n            };\n          });\n          return { ...question, answerOptions: newAnswerOptions };\n        });\n        return newState;\n      });\n    };\n  };\n\n  const closeToast = () => {\n    setShowToast((prevState) => {\n      const newState = { ...prevState, show: false };\n      return newState;\n    });\n  };\n\n  const showSpinner = () => {\n    return (\n      <Spinner animation=\"border\" role=\"status\" variant=\"primary\">\n        <span className=\"sr-only\">Lädt...</span>\n      </Spinner>\n    );\n  };\n\n  const showCodeInput = () => {\n    return <InsertCode url=\"participate\" urlId={urlId} />;\n  };\n\n  const showParticipationForm = () => {\n    return (\n      <Form onSubmit={submitForm} noValidate validated={validated}>\n        <div className=\"vertical-stack\">\n          {data.map((question, i) => (\n            <QuestionParticipationBlock\n              question={question}\n              updateChoosen={(() => updateChoosen(question.questionId))()}\n              questionIndex={i}\n              key={i}\n            />\n          ))}\n        </div>\n        <Form.Group className=\"my-4 d-flex justify-content-end\">\n          <div>\n            <Button href=\"/selectPath\" variant=\"link\" className=\"text-white\">\n              Abbrechen\n            </Button>\n            <Button type=\"submit\">Teilnahme absenden</Button>\n          </div>\n        </Form.Group>\n      </Form>\n    );\n  };\n\n  const showParticipationFinished = () => {\n    return (\n      <>\n        <p style={{ marginTop: \"25vh\" }}>Vielen Dank für deine Teilnahme!</p>\n        <Button href=\"/\" variant=\"primary\" className=\"my-3\">\n          Zur Startseite\n        </Button>\n      </>\n    );\n  };\n\n  const showState = () => {\n    if (isSent) {\n      return showParticipationFinished();\n    }\n    if (isLoading) {\n      return showSpinner();\n    }\n    if (isValidId) {\n      return showParticipationForm();\n    }\n    return showCodeInput();\n  };\n\n  return (\n    <>\n      <Title>Teilnahme</Title>\n      {showState()}\n      <MessageToast\n        visibility={showToast.show}\n        onClose={closeToast}\n        error={showToast.error}\n        body={showToast.body}\n      />\n    </>\n  );\n};\n\nexport default Participate;\n"]},"metadata":{},"sourceType":"module"}