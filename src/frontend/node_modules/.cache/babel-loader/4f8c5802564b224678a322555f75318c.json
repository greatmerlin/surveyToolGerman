{"ast":null,"code":"var _jsxFileName = \"/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Components/HyperlinkCards.js\";\nimport React from \"react\";\nimport { CardDeck, Card, InputGroup, Button, FormControl } from \"react-bootstrap\";\n/**\n * Cards showing the link for participation and evaluation.\n * Includes the function to copy to clipboard with a click on a button.\n *\n * @param {participationLink} uuid, needed to have access to the participation page.\n * @param {evaluationLink} uuid, needed to have access to the evaluation page.\n * @param {className} string\n * @param {showToast} function, to display a message to the user.\n * @returns JSX.Element\n */\n\nexport default function HyperlinkCards({\n  participationLink,\n  evaluationLink,\n  className,\n  showToast\n}) {\n  const cards = [{\n    id: \"participate\",\n    title: \"Teilnahmelink\",\n    text: \"Lade Teilnehmer ein, indem du mit ihnen folgenden Link teilst:\",\n    url: `${window.location.origin}/participate/${participationLink}`,\n    copyLabel: \"Kopieren\"\n  }, {\n    id: \"evaluate\",\n    title: \"Auswertungslink\",\n    text: \"Um zurück auf diese Auswertungsseite zu gelangen, solltest du dir diesen Link merken:\",\n    url: `${window.location.origin}/evaluate/${evaluationLink}`,\n    copyLabel: \"Kopieren\"\n  }];\n\n  const copyToClipboard = id => {\n    const input = document.querySelector(`#${id}`);\n    input.focus();\n    input.select();\n\n    try {\n      const successful = document.execCommand(\"copy\");\n\n      if (successful) {\n        showToast(\"Link wurde in deine Zwischenablage kopiert.\", false);\n      } else {\n        showToast(\"Beim Kopieren in die Zwischenablage ist ein Fehler aufgetreten.\");\n      }\n    } catch (err) {\n      const msg = \"Beim Kopieren in die Zwischenablage ist ein Fehler aufgetreten.\";\n      console.error(msg, err);\n      showToast(msg);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(CardDeck, {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, cards.map((card, i) => /*#__PURE__*/React.createElement(Card, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, card.title), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, card.text)), /*#__PURE__*/React.createElement(Card.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    id: card.id,\n    value: card.url,\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => copyToClipboard(card.id),\n    variant: \"outline-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, card.copyLabel)))))));\n}","map":{"version":3,"sources":["/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Components/HyperlinkCards.js"],"names":["React","CardDeck","Card","InputGroup","Button","FormControl","HyperlinkCards","participationLink","evaluationLink","className","showToast","cards","id","title","text","url","window","location","origin","copyLabel","copyToClipboard","input","document","querySelector","focus","select","successful","execCommand","err","msg","console","error","map","card","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  CardDeck,\n  Card,\n  InputGroup,\n  Button,\n  FormControl,\n} from \"react-bootstrap\";\n\n/**\n * Cards showing the link for participation and evaluation.\n * Includes the function to copy to clipboard with a click on a button.\n *\n * @param {participationLink} uuid, needed to have access to the participation page.\n * @param {evaluationLink} uuid, needed to have access to the evaluation page.\n * @param {className} string\n * @param {showToast} function, to display a message to the user.\n * @returns JSX.Element\n */\n\n\nexport default function HyperlinkCards({\n  participationLink,\n  evaluationLink,\n  className,\n  showToast,\n}) {\n  const cards = [\n    {\n      id: \"participate\",\n      title: \"Teilnahmelink\",\n      text: \"Lade Teilnehmer ein, indem du mit ihnen folgenden Link teilst:\",\n      url: `${window.location.origin}/participate/${participationLink}`,\n      copyLabel: \"Kopieren\",\n    },\n    {\n      id: \"evaluate\",\n      title: \"Auswertungslink\",\n      text:\n        \"Um zurück auf diese Auswertungsseite zu gelangen, solltest du dir diesen Link merken:\",\n      url: `${window.location.origin}/evaluate/${evaluationLink}`,\n      copyLabel: \"Kopieren\",\n    },\n  ];\n\n  const copyToClipboard = (id) => {\n    const input = document.querySelector(`#${id}`);\n    input.focus();\n    input.select();\n\n    try {\n      const successful = document.execCommand(\"copy\");\n      if (successful) {\n        showToast(\"Link wurde in deine Zwischenablage kopiert.\", false);\n      } else {\n        showToast(\n          \"Beim Kopieren in die Zwischenablage ist ein Fehler aufgetreten.\"\n        );\n      }\n    } catch (err) {\n      const msg =\n        \"Beim Kopieren in die Zwischenablage ist ein Fehler aufgetreten.\";\n      console.error(msg, err);\n      showToast(msg);\n    }\n  };\n\n  return (\n    <CardDeck className={className}>\n      {cards.map((card, i) => (\n        <Card key={i}>\n          <Card.Body>\n            <Card.Title>{card.title}</Card.Title>\n            <Card.Text>{card.text}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <InputGroup>\n              <FormControl id={card.id} value={card.url} readOnly />\n              <InputGroup.Append>\n                <Button\n                  onClick={() => copyToClipboard(card.id)}\n                  variant=\"outline-primary\"\n                >\n                  {card.copyLabel}\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Card.Footer>\n        </Card>\n      ))}\n    </CardDeck>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}