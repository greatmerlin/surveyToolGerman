{"ast":null,"code":"var _jsxFileName = \"/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Pages/Evaluate.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport Title from \"../Components/Title\";\nimport HyperlinkCards from \"../Components/HyperlinkCards\";\nimport InsertCode from \"../Components/InsertCode\";\nimport { HOST } from \"../Config\";\nimport QuestionStatBlock from \"../Components/QuestionStatBlock\";\nimport MessageToast from \"../Components/MessageToast\";\n/**\n * Page displaying the summary of a survey.\n * Props contain an {id} param injected from the client-side router.\n *\n * @returns JSX.Element\n */\n\nexport default function Evaluate(props) {\n  const urlId = props.match.params.id;\n  const [state, setState] = useState();\n  const [validId, setValidId] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [maxValue, setMaxValue] = useState(0);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    error: true,\n    body: \"\"\n  });\n  useEffect(() => {\n    fetch(`${HOST}/api/survey/${urlId}/result/`).then(response => response.json()).then(json => {\n      setIsLoading(false);\n\n      if (json.questions) {\n        setState(json);\n        setValidId(true);\n        const maxNumber = json.questions.reduce((acc, question) => {\n          const localMax = question.answerOptions.reduce((localAcc, answerOption) => {\n            return localAcc < answerOption.count ? answerOption.count : localAcc;\n          }, 0);\n          return acc < localMax ? localMax : acc;\n        }, 0);\n        setMaxValue(maxNumber);\n      }\n    }).catch(error => {\n      setIsLoading(false);\n      setShowToast(prevState => {\n        const newState = { ...prevState,\n          show: true,\n          error: true,\n          body: error.message\n        };\n        return newState;\n      });\n      console.error({\n        error\n      });\n    });\n  }, [urlId]);\n\n  const closeToast = () => {\n    setShowToast(prevState => {\n      const newState = { ...prevState,\n        show: false\n      };\n      return newState;\n    });\n  };\n\n  const showNewToast = (msg, error = true) => {\n    setShowToast(prevState => {\n      const newState = { ...prevState,\n        show: true,\n        error: error,\n        body: msg\n      };\n      return newState;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Deine Umfrage\"), isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"L\\xE4dt...\")) : validId ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HyperlinkCards, {\n    className: \"mb-4\",\n    participationLink: state.surveyId,\n    evaluationLink: state.surveySecretId,\n    showToast: showNewToast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vertical-stack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Umfrageauswertung\"), state.questions.map((question, i) => /*#__PURE__*/React.createElement(QuestionStatBlock, {\n    question: question,\n    maxValue: maxValue,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  })))) : /*#__PURE__*/React.createElement(InsertCode, {\n    url: \"evaluate\",\n    urlId: urlId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MessageToast, {\n    visibility: showToast.show,\n    onClose: closeToast,\n    body: showToast.body,\n    error: showToast.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Pages/Evaluate.js"],"names":["React","useState","useEffect","Spinner","Title","HyperlinkCards","InsertCode","HOST","QuestionStatBlock","MessageToast","Evaluate","props","urlId","match","params","id","state","setState","validId","setValidId","isLoading","setIsLoading","maxValue","setMaxValue","showToast","setShowToast","show","error","body","fetch","then","response","json","questions","maxNumber","reduce","acc","question","localMax","answerOptions","localAcc","answerOption","count","catch","prevState","newState","message","console","closeToast","showNewToast","msg","surveyId","surveySecretId","map","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport Title from \"../Components/Title\";\nimport HyperlinkCards from \"../Components/HyperlinkCards\";\nimport InsertCode from \"../Components/InsertCode\";\nimport { HOST } from \"../Config\";\nimport QuestionStatBlock from \"../Components/QuestionStatBlock\";\nimport MessageToast from \"../Components/MessageToast\";\n\n/**\n * Page displaying the summary of a survey.\n * Props contain an {id} param injected from the client-side router.\n *\n * @returns JSX.Element\n */\n\nexport default function Evaluate(props) {\n  const urlId = props.match.params.id;\n  const [state, setState] = useState();\n  const [validId, setValidId] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [maxValue, setMaxValue] = useState(0);\n  const [showToast, setShowToast] = useState({\n    show: false,\n    error: true,\n    body: \"\",\n  });\n\n  useEffect(() => {\n    fetch(`${HOST}/api/survey/${urlId}/result/`)\n      .then((response) => response.json())\n      .then((json) => {\n        setIsLoading(false);\n        if (json.questions) {\n          setState(json);\n          setValidId(true);\n          const maxNumber = json.questions.reduce((acc, question) => {\n            const localMax = question.answerOptions.reduce(\n              (localAcc, answerOption) => {\n                return localAcc < answerOption.count\n                  ? answerOption.count\n                  : localAcc;\n              },\n              0\n            );\n            return acc < localMax ? localMax : acc;\n          }, 0);\n          setMaxValue(maxNumber);\n        }\n      })\n      .catch((error) => {\n        setIsLoading(false);\n        setShowToast((prevState) => {\n          const newState = {\n            ...prevState,\n            show: true,\n            error: true,\n            body: error.message,\n          };\n          return newState;\n        });\n        console.error({ error });\n      });\n  }, [urlId]);\n\n  const closeToast = () => {\n    setShowToast((prevState) => {\n      const newState = { ...prevState, show: false };\n      return newState;\n    });\n  };\n\n  const showNewToast = (msg, error = true) => {\n    setShowToast((prevState) => {\n      const newState = {\n        ...prevState,\n        show: true,\n        error: error,\n        body: msg,\n      };\n      return newState;\n    });\n  };\n\n  return (\n    <>\n      <Title>Deine Umfrage</Title>\n      {isLoading ? (\n        <Spinner animation=\"border\" role=\"status\" variant=\"primary\">\n          <span className=\"sr-only\">Lädt...</span>\n        </Spinner>\n      ) : validId ? (\n        <>\n          <HyperlinkCards\n            className=\"mb-4\"\n            participationLink={state.surveyId}\n            evaluationLink={state.surveySecretId}\n            showToast={showNewToast}\n          />\n          <div className=\"vertical-stack\">\n            <h3>Umfrageauswertung</h3>\n            {state.questions.map((question, i) => (\n              <QuestionStatBlock\n                question={question}\n                maxValue={maxValue}\n                key={i}\n              />\n            ))}\n          </div>\n        </>\n      ) : (\n        <InsertCode url=\"evaluate\" urlId={urlId} />\n      )}\n      <MessageToast\n        visibility={showToast.show}\n        onClose={closeToast}\n        body={showToast.body}\n        error={showToast.error}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}