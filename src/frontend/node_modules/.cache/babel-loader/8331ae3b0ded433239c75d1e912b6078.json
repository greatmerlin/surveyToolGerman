{"ast":null,"code":"var _jsxFileName = \"/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Components/QuestionStatBlock.js\";\nimport React from \"react\";\nimport { Card, Form, ListGroup, Badge } from \"react-bootstrap\";\nimport { QUESTION_TYPES } from \"../Config\";\nimport BarChart from \"./BarChart\";\n/**\n * Renders the summary of a question.\n *\n * @param {question} object, which consists of {question as string}, {questionType as enum (MULTIPLE_CHOICE or MULTISELECT)} and {answerOptions as list}.\n * @param {maxValue} number, maximum number of votes for any answer in the survey for context.\n * @returns  JSX.Element\n */\n\nexport default function QuestionStatBlock({\n  question,\n  maxValue\n}) {\n  const sumOfParticipations = question.answerOptions.reduce((acc, ao) => {\n    return acc + ao.count;\n  }, 0);\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, question.question), /*#__PURE__*/React.createElement(Form.Text, {\n    className: \"text-muted mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE ? \"Einfachauswahl: Teilnehmer muss exakt eine Antwort ausw채hlen.\" : \"Mehrfachauswahl: Teilnehmer kann 0, 1 oder mehrere Antworten ausw채hlen.\"), /*#__PURE__*/React.createElement(ListGroup, {\n    variant: \"flush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, question.answerOptions.map(ao => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    action: true,\n    key: ao.answerOptionId,\n    style: {\n      cursor: \"inherit\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"relative\",\n      zIndex: 10,\n      display: \"block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    variant: \"primary\",\n    className: \"mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, ao.count), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, ao.answerOption), sumOfParticipations > 0 ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: 0,\n      right: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }\n  }, Math.round(ao.count / sumOfParticipations * 100), \" %\") : \"\"), /*#__PURE__*/React.createElement(BarChart, {\n    value: ao.count,\n    max: maxValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Components/QuestionStatBlock.js"],"names":["React","Card","Form","ListGroup","Badge","QUESTION_TYPES","BarChart","QuestionStatBlock","question","maxValue","sumOfParticipations","answerOptions","reduce","acc","ao","count","questionType","MULTIPLE_CHOICE","map","answerOptionId","cursor","position","zIndex","display","answerOption","top","right","Math","round"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,SAArB,EAAgCC,KAAhC,QAA6C,iBAA7C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA3B,EAAmD;AAChE,QAAMC,mBAAmB,GAAGF,QAAQ,CAACG,aAAT,CAAuBC,MAAvB,CAA8B,CAACC,GAAD,EAAMC,EAAN,KAAa;AACrE,WAAOD,GAAG,GAAGC,EAAE,CAACC,KAAhB;AACD,GAF2B,EAEzB,CAFyB,CAA5B;AAIA,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaP,QAAQ,CAACA,QAAtB,CADF,eAEE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QAAQ,CAACQ,YAAT,KAA0BX,cAAc,CAACY,eAAzC,GACG,+DADH,GAEG,yEAHN,CAFF,eAOE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QAAQ,CAACG,aAAT,CAAuBO,GAAvB,CAA4BJ,EAAD,iBAC1B,oBAAC,SAAD,CAAW,IAAX;AACE,IAAA,MAAM,MADR;AAEE,IAAA,GAAG,EAAEA,EAAE,CAACK,cAFV;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE,EAAhC;AAAoCC,MAAAA,OAAO,EAAE;AAA7C,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,SAAf;AAAyB,IAAA,SAAS,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,EAAE,CAACC,KADN,CAHF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASD,EAAE,CAACU,YAAZ,CANF,EAOGd,mBAAmB,GAAG,CAAtB,gBACC;AAAM,IAAA,KAAK,EAAE;AAAEW,MAAAA,QAAQ,EAAE,UAAZ;AAAwBI,MAAAA,GAAG,EAAE,CAA7B;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,KAAL,CAAYd,EAAE,CAACC,KAAH,GAAWL,mBAAZ,GAAmC,GAA9C,CADH,OADD,GAKC,EAZJ,CALF,eAoBE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEI,EAAE,CAACC,KAApB;AAA2B,IAAA,GAAG,EAAEN,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADD,CADH,CAPF,CADF,CADF;AAsCD","sourcesContent":["import React from \"react\";\nimport { Card, Form, ListGroup, Badge } from \"react-bootstrap\";\nimport { QUESTION_TYPES } from \"../Config\";\nimport BarChart from \"./BarChart\";\n\n/**\n * Renders the summary of a question.\n *\n * @param {question} object, which consists of {question as string}, {questionType as enum (MULTIPLE_CHOICE or MULTISELECT)} and {answerOptions as list}.\n * @param {maxValue} number, maximum number of votes for any answer in the survey for context.\n * @returns  JSX.Element\n */\n\nexport default function QuestionStatBlock({ question, maxValue }) {\n  const sumOfParticipations = question.answerOptions.reduce((acc, ao) => {\n    return acc + ao.count;\n  }, 0);\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{question.question}</Card.Title>\n        <Form.Text className=\"text-muted mb-3\">\n          {question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE\n            ? \"Einfachauswahl: Teilnehmer muss exakt eine Antwort ausw채hlen.\"\n            : \"Mehrfachauswahl: Teilnehmer kann 0, 1 oder mehrere Antworten ausw채hlen.\"}\n        </Form.Text>\n        <ListGroup variant=\"flush\">\n          {question.answerOptions.map((ao) => (\n            <ListGroup.Item\n              action\n              key={ao.answerOptionId}\n              style={{ cursor: \"inherit\" }}\n            >\n              <span\n                style={{ position: \"relative\", zIndex: 10, display: \"block\" }}\n              >\n                <Badge variant=\"primary\" className=\"mr-3\">\n                  {ao.count}\n                </Badge>\n                <strong>{ao.answerOption}</strong>\n                {sumOfParticipations > 0 ? (\n                  <span style={{ position: \"absolute\", top: 0, right: 0 }}>\n                    {Math.round((ao.count / sumOfParticipations) * 100)} %\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </span>\n              <BarChart value={ao.count} max={maxValue} />\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}