{"ast":null,"code":"var _jsxFileName = \"/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Components/QuestionParticipationBlock.js\";\nimport React from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport { QUESTION_TYPES } from \"../Config\";\n/**\n * Renders a question for the user to participate.\n *\n * @param {question} object, which consists of {question as string}, {questionType as enum (MULTIPLE_CHOICE or MULTISELECT)} and {answerOptions as list}.\n * @param {questionIndex} number\n * @param {updateChoosen} function, to handle when user changes choosen answers\n * @returns JSX.Element\n */\n\nexport default function QuestionParticipationBlock({\n  question,\n  questionIndex,\n  updateChoosen\n}) {\n  const type = question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE ? \"radio\" : \"checkbox\";\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, question.question), /*#__PURE__*/React.createElement(Form.Text, {\n    className: \"text-muted mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE ? \"W채hle exakt eine Antwort.\" : \"W채hle 0, 1 oder mehrere Antworten.\"), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, question.answerOptions.map((answerOption, i) => /*#__PURE__*/React.createElement(Form.Check, {\n    type: type,\n    id: `${questionIndex}-${i}`,\n    value: answerOption.choosen,\n    onChange: () => updateChoosen(answerOption.answerOptionId),\n    name: questionIndex,\n    label: answerOption.answerOption,\n    key: i,\n    required: type === \"radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/theologosbaxevanos/Projects/pa_5-projektarbeit/src/frontend/src/Components/QuestionParticipationBlock.js"],"names":["React","Card","Form","QUESTION_TYPES","QuestionParticipationBlock","question","questionIndex","updateChoosen","type","questionType","MULTIPLE_CHOICE","answerOptions","map","answerOption","i","choosen","answerOptionId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,WAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,0BAAT,CAAoC;AACjDC,EAAAA,QADiD;AAEjDC,EAAAA,aAFiD;AAGjDC,EAAAA;AAHiD,CAApC,EAIZ;AACD,QAAMC,IAAI,GACRH,QAAQ,CAACI,YAAT,KAA0BN,cAAc,CAACO,eAAzC,GACI,OADJ,GAEI,UAHN;AAKA,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaL,QAAQ,CAACA,QAAtB,CADF,eAEE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QAAQ,CAACI,YAAT,KAA0BN,cAAc,CAACO,eAAzC,GACG,2BADH,GAEG,oCAHN,CAFF,eAOE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QAAQ,CAACM,aAAT,CAAuBC,GAAvB,CAA2B,CAACC,YAAD,EAAeC,CAAf,kBAC1B,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,IAAI,EAAEN,IADR;AAEE,IAAA,EAAE,EAAG,GAAEF,aAAc,IAAGQ,CAAE,EAF5B;AAGE,IAAA,KAAK,EAAED,YAAY,CAACE,OAHtB;AAIE,IAAA,QAAQ,EAAE,MAAMR,aAAa,CAACM,YAAY,CAACG,cAAd,CAJ/B;AAKE,IAAA,IAAI,EAAEV,aALR;AAME,IAAA,KAAK,EAAEO,YAAY,CAACA,YANtB;AAOE,IAAA,GAAG,EAAEC,CAPP;AAQE,IAAA,QAAQ,EAAEN,IAAI,KAAK,OARrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAPF,CADF,CADF;AA0BD","sourcesContent":["import React from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport { QUESTION_TYPES } from \"../Config\";\n\n/**\n * Renders a question for the user to participate.\n *\n * @param {question} object, which consists of {question as string}, {questionType as enum (MULTIPLE_CHOICE or MULTISELECT)} and {answerOptions as list}.\n * @param {questionIndex} number\n * @param {updateChoosen} function, to handle when user changes choosen answers\n * @returns JSX.Element\n */\n\nexport default function QuestionParticipationBlock({\n  question,\n  questionIndex,\n  updateChoosen,\n}) {\n  const type =\n    question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE\n      ? \"radio\"\n      : \"checkbox\";\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{question.question}</Card.Title>\n        <Form.Text className=\"text-muted mb-3\">\n          {question.questionType === QUESTION_TYPES.MULTIPLE_CHOICE\n            ? \"W채hle exakt eine Antwort.\"\n            : \"W채hle 0, 1 oder mehrere Antworten.\"}\n        </Form.Text>\n        <Form.Group>\n          {question.answerOptions.map((answerOption, i) => (\n            <Form.Check\n              type={type}\n              id={`${questionIndex}-${i}`}\n              value={answerOption.choosen}\n              onChange={() => updateChoosen(answerOption.answerOptionId)}\n              name={questionIndex}\n              label={answerOption.answerOption}\n              key={i}\n              required={type === \"radio\"}\n            />\n          ))}\n        </Form.Group>\n      </Card.Body>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}